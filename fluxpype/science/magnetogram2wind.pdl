=head1 NAME

magnetogram2wind - FLUX Main Pipeline Script
A script to run the entire FLUX pipeline on a single Carrington Rotation (CR).

=head1 SYNOPSIS

    pdl magnetogram2wind.pdl [options]

=head1 DESCRIPTION

This script automates the entire FLUX pipeline for a given Carrington Rotation (CR).
The pipeline consists of several stages:

=over 4

=item 1. Downloading the Magnetogram
=item 2. Processing the Magnetogram to find footpoints
=item 3. Running the Python PFSS Code to trace the footpoints into the corona
=item 4. Generating an initial FLUX world from the PFSS output
=item 5. Relaxing the initial world state using the FLUX code
=item 6. Plotting the world states
=item 7. Computing and plotting the solar wind and other derived quantities

=back

=head1 NOTES

Until the homebrew issues are fixed, plot using the command: C<$world -> render({'dev'=>'qt'})>.

=head1 AUTHOR

Gilly <gilly@swri.org> (and others!)

=head1 SEE ALSO

L<PDL>, L<PDL::AutoLoader>, L<PDL::Transform>, L<PDL::NiceSlice>, L<PDL::Options>,
L<Flux>, L<PDL::IO::Misc>, L<File::Path>, L<Time::HiRes>, L<File::Basename>, L<pipe_helper>

=cut

package magnetogram2wind;

# Import required modules
use strict;
use warnings;

# Include the setup script to set the @INC paths
# use local::lib;
# use lib ".";
# use lib "..";

# use FindBin qw($RealBin);
# use File::Spec;

use FindBin;
use lib $FindBin::Bin;       # Adds the script's directory
use lib "$FindBin::Bin/..";  # Adds the parent directory
use lib "$FindBin::Bin/../plotting";  # Adds the neighbor's directory
use lib "$FindBin::Bin/../..";  # Adds the grandparent directory


use Term::ANSIColor;
print color("magenta");



# use File::Spec::Functions qw(rel2abs);
# BEGIN {
#     # Include relative paths for required modules
#     my @required_modules_paths = ("fluxpype", "fluxpype/science", "fluxpype/plotting", "science", "plotting");
#     foreach my $path (@required_modules_paths) {
#         my $absolute_path = rel2abs($path);
#         print $absolute_path . "\n";
#         unshift @INC, $absolute_path;
#     }
# }

# my @required_modules = qw(
#     Flux
#     pipe_helper
#     get_hilbert_footpoints
#     make_world_from_pfss
#     plot_world
#     relax_pfss_world
# );

# foreach my $module (@required_modules) {
#     eval {
#         require "$module.pm";  # Dynamically find and load the module
#         $module->import();     # Explicitly call the import method
#     };
#     if ($@) {
#         die "Required module $module not found or failed to load. Please ensure it is installed and accessible.\nError: $@\n";
#     }
# }


use make_world_from_pfss qw(make_world_from_pfss);
use relax_pfss_world qw(relax_pfss_world);
use plot_world qw(plot_worlds);
use get_wind qw(get_wind);


use PDL;
use PDL::AutoLoader;
use PDL::Transform;
use PDL::NiceSlice;
use PDL::Options;
use PDL::IO::Misc;
use File::Path;
use File::Find;
use Time::HiRes qw(clock_gettime sleep);
use File::Basename qw(fileparse);
use File::Spec::Functions qw(catfile catdir rel2abs);


print "\nLIBS ARE LOADED\n";
# $PDL::BIGPDL = 1;

# Confirm modules were loaded
my $module_path = $INC{'Flux.pm'} || "Undefined";
print "FLUX is located at: $module_path\n";

# #######################################################################################################
# ## Job Settings #######################################################################################
# #######################################################################################################

# Read configurations from disk
print "Reading configurations...\n";
my %configs = pipe_helper::configurations();



my $CR = $ARGV[0] // ( $configs{rotations}->at(0) );
$configs{CR} = $CR;
my $n_fluxons_wanted = $ARGV[1] // ( $configs{fluxon_count}->at(0) );
$configs{n_fluxons_wanted} = $n_fluxons_wanted;
my $adapt = $ARGV[2] // ( $configs{adapts}->at(0) );
my $flow_method = $ARGV[3] // ( $configs{flow_method}->at(0) );
$configs{flow_method} = $flow_method;
$configs{adapt} = $adapt;
# pipe_helper::configs_update_magdir( \%configs );
# $configs{magdir} = catdir($configs{data_dir}, 'magnetograms');

my $closed_file;
my $open_file;
my $world_out_path;

if ( !defined $ARGV[0] and $configs{verbose} ) {
    print "Using first value ($CR) from config for Carrington Rotation.\n";
}

if ( !defined $ARGV[1] and $configs{verbose} ) {
    print
      "Using first value ($n_fluxons_wanted) from config for fluxon count.\n\n";
}

my $reduction  = $configs{mag_reduce};
my $recompute  = $configs{recompute};
my $batch_name = $configs{batch_name};
my $plot_only  = $configs{plot_only};
my $lim        = $configs{inner_fov};
my $lim2       = $configs{outer_fov};
my $do_steps =
  $configs{do_steps};    # relaxation steps between checking stiffness target
my $relax_threshold =
  $configs{relax_threshold};    # stiffness target percent to stop relaxation
my $max_cycles   = $configs{max_cycles};
my $do_wind_calc = $configs{do_wind_calc};
my $print_dirs   = $configs{verbose};
my $adapt_select = $configs{adapt_select};
my $base_dir = $configs{base_dir};

my $recompute_string = 'FALSE';
our ( $this_world_relaxed, $N_actual );


my ( $pipedir, $pdldir, $datdir, $magdir, $batchdir, $logfile ) =
  @configs{qw/pipe_dir pdl_dir datdir mag_dir batch_dir logfile/};


#############################################################################
#### Initialize Environment #################################################
#############################################################################

my $do_download               = 0 // $configs{do_download};
my $force_process_magnetogram = 0;
my $do_pfss                   = 0;
my $makeworld                 = 0;
my $do_relax                  = 0;
my $do_png                    = 0;
my $do_interactive            = 0;

if ($recompute) {
    $force_process_magnetogram = 1;
    $recompute_string          = 'TRUE';
    $do_pfss                   = 1;
    $makeworld                 = 1;
    $do_wind_calc              = 1;
    $do_relax                  = 1;
    $do_png                    = 1;
}

# Select the World
my $inst;
if ($adapt) {$inst = 'adapt';}
else {$inst = 'hmi';}

# pipe_helper::print_banner( $batch_name, $CR, $reduction, $n_fluxons_wanted,
#     $recompute_string, $adapt, $flow_method );

my $very_beginning = clock_gettime();

print color("reset");
print "\n\n\n";
#### BEGIN ##################################################################
if (1-$configs{wind_only}){

#######################################################################################################
## Download the Magnetogram ###########################################################################
#######################################################################################################

    use FindBin;
    my $this_dir     = $FindBin::RealBin;
    my $get_mag_path = "$this_dir/get_magnetograms.py";
    my $the_dat_dir = $datdir;
    print $the_dat_dir . "\n\n\n";
    my $mag_command = "python3 $get_mag_path --cr $CR --reduce $reduction --do_download $do_download --adapt $adapt";
    print $mag_command . "\n\n\n";


    system($mag_command) == 0 or ( die "Python script returned error $?", exit );

#######################################################################################################
## Process the Magnetogram ## Find the Root Points ####################################################
#######################################################################################################
# The hilbert curve code defines where fluxons should be rooted based on the distribution of flux at 1R_sun.
# Since each contains a discretized amount of magnetic flux, we need to subdivide the domain to reflect
# how to represent that with fluxons.

    $configs{force_process_magnetogram} = $force_process_magnetogram;

    # Retrieve the Footpoints using the Hilbert method
    my $N_actual =
      get_hilbert_footpoints::get_hilbert_footpoints( %configs );

#######################################################################################################
## Run the Python PFSS Code ## Trace the Footpoints into the Corona ###################################
#######################################################################################################
# Then we take those root points and use the pfss tracer to map upward from those initial points
# into the corona to define an initial placeholder geometry.
# This lets us extend this into 3d space with real linking topology.
    my $get_pfss_path = "$this_dir/get_pfss.py";

    my $pfss_command = "python $get_pfss_path --cr $CR --magpath $configs{magpath} --nwant $n_fluxons_wanted --adapt $adapt";

    # print $pfss_command;
    system($pfss_command) == 0
      or ( die "Python script returned error $?", exit );

    # print "3  " . $configs{'magpath'} . "\n\n";

#######################################################################################################
## Generate World from PFSS ###########################################################################
#######################################################################################################
    my $force_make_world = 0;

    ( $open_file, $closed_file, $world_out_path ) = make_world_from_pfss(
        $datdir,           $batch_name, $CR,               $reduction,
        $n_fluxons_wanted, $adapt,      $force_make_world, $lim,
        $lim2,             \%configs,
    );
#######################################################################################################
## Relax the initial world state ##Use the FLUX Code ##################################################
#######################################################################################################
# Then we take that initial guess from pfss.py and relax down using the fluxon code, which gets us realistic topology, and a near force-free state,
# but allowing for currents (not a potential field any longer).


    my $world_out_dir = $datdir . "/batches/$batch_name/data/cr" . $CR . '/world/';
    mkdir $world_out_dir unless -d $world_out_dir;
    my $full_world_path =
      $world_out_dir . 'cr' . $CR . "_f$n_fluxons_wanted\_$inst.flux";
    our $this_world_orig;

    ($this_world_orig, $this_world_relaxed, my $stepnum ) =
      relax_pfss_world(
        $world_out_dir, $full_world_path,  $do_relax,
        $do_steps,      $relax_threshold,  $max_cycles,
        $logfile,       $n_fluxons_wanted, $N_actual,
        $datdir,        $batch_name,       $CR
      );

#######################################################################################################
## Plot the world states  #############################################################################
#######################################################################################################

    plot_worlds(
        $this_world_orig,  $this_world_relaxed, $do_interactive,
        $do_png,           $full_world_path,    $datdir,
        $batch_name,       $CR,                 $N_actual,
        $n_fluxons_wanted, $lim,                $lim2,
        $stepnum
    );



# # Plot the field map
my $fmap_command =
"python $base_dir/fluxpype/fluxpype/plotting/plot_fieldmap.py --cr $CR --open $open_file"
  . " --closed $closed_file --nwant $n_fluxons_wanted --adapt $adapt";
#   print $fmap_command;
system($fmap_command) == 0 or ( die "Python script returned error $?", exit );


}  # End of the if (0) block

#######################################################################################################
## Begin solar wind computation  ######################################################################
#######################################################################################################
our ( $out_b, $out_fr, $out_wind, $out_b_all );


our $this_world_orig;
# our $this_world_relaxed;
$this_world_relaxed, $this_world_orig = pipe_helper::load_highest_numbered_world($datdir, $batch_name, $CR, $n_fluxons_wanted, $inst);

our $use_world = 0;
my $plot_stiff = 0;
if ($plot_stiff){
  print "Using Stiff World:\n";
  $use_world = $this_world_orig;
} else {
  print "Using Relaxed World:\n";
  $use_world = $this_world_relaxed;
}
  print $use_world;

 ( $out_b, $out_fr, $out_wind, $out_b_all ) =
  get_wind( $use_world, $CR, $n_fluxons_wanted, $recompute, $flow_method, $plot_stiff );

#######################################################################################################
## Plot the Solar wind Solutions  #####################################################################
#######################################################################################################

if (1) {

use File::Spec::Functions qw(catfile);
use Term::ANSIColor;

# Print header with color formatting
print color("bright_cyan");
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
print("(py) Plotting Solar Wind Maps for CR$CR\n");
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
print color("reset");


# Define common plotting directory
my $plot_dir = catfile($base_dir, "fluxpype", "fluxpype", "plotting");

print "Plotting to $plot_dir\n\n";

# Define common command-line options shared by most plotting commands
my $common_opts = " --cr $CR --nwant $n_fluxons_wanted --adapt $adapt";

# Utility subroutine to execute a command and report errors with context
sub run_command {
    my ($cmd) = @_;
    print "*********  Running: $cmd\n";  # Optional logging for debugging
    system($cmd) == 0 or die "Error executing command:\n  $cmd\nReturn code: $?\n";
}

# Subroutine that groups all plotting commands
sub run_all_plots {
    my @commands = (
        # Plot magnetic fields
        "python3 " . catfile($plot_dir, "plot_bmag.py") .           " --file $out_b" . $common_opts,

        # Multi-plot of all magnetic fields from the batch
        "python3 " . catfile($plot_dir, "multiplot_bmag_all.py") .  " --file $out_b_all" . $common_opts,

        # # Plot magnetic fields in the fluxon world
        # "python3 " . catfile($plot_dir, "plot_bmag_all.py") .       " --file $out_b_all" . $common_opts,

        # # Plot with many panels showing geometric expansion of the fields
        # "python3 " . catfile($plot_dir, "plot_bmag_fill.py") .      " --file $out_b_all" . $common_opts,

        # Plot FR
        "python3 " . catfile($plot_dir, "plot_fr.py") .               " --file $out_fr" . $common_opts,

        # Detailed wind map plot
        "python3 " . catfile($plot_dir, "plot_wind_map_detailed.py") . " --file $out_wind" . $common_opts,

        # Wind map square (with additional wind method option)
        "python3 " . catfile($plot_dir, "plot_wind_map_square.py") . " --file $out_wind" . $common_opts . " --wind_method $flow_method",

        # Plot wind solutions (using a different file structure for input data)
        "python3 " . catfile($plot_dir, "plot_wind_solutions.py") . " $datdir/batches/$batch_name/data/cr$CR/wind"
    );

    # Execute each plotting command sequentially
    for my $cmd (@commands) {
        run_command($cmd);
    }
}

# Execute all plotting commands
run_all_plots();












# # This is the first script that plots the magnetic fields
# my $plot_bmag_cmd = "python3 $base_dir/fluxpype/fluxpype/plotting/plot_bmag.py"
#       . " --cr $CR --file $out_b --nwant $n_fluxons_wanted --adapt $adapt";

# system($plot_bmag_cmd) == 0 or ( die "Python script returned error $?", exit );


# # This plot shows the actual magnetic fields from all the sims in the batch
# my $plot_bmag_mall_cmd = "python3 $base_dir/fluxpype/fluxpype/plotting/multiplot_bmag_all.py"
#       . " --cr $CR --file $out_b_all --nwant $n_fluxons_wanted --adapt $adapt";
# system($plot_bmag_mall_cmd) == 0 or ( die "Python script returned error $?", exit );


# # This plot shows the actual magnetic fields in the fluxon world
# system(
# "python3 fluxpype/plotting/plot_bmag_all.py"
#       . " --cr $CR --file $out_b_all --nwant $n_fluxons_wanted --adapt $adapt")
#       == 0 or ( die "Python script returned error $?", exit );


# # This is the plot with many panels showing the expansion of the fields geometrically
# system(
# "python3 fluxpype/plotting/plot_bmag_fill.py"
#       . " --cr $CR --file $out_b_all --nwant $n_fluxons_wanted --adapt $adapt"
# ) == 0 or ( die "Python script returned error $?", exit );


# system(
# "python3 $base_dir/fluxpype/fluxpype/plotting/plot_fr.py"
#       . "  --cr $CR --file $out_fr --nwant $n_fluxons_wanted --adapt $adapt"
# ) == 0 or ( die "Python script returned error $?", exit );


# system(
# "python3 $base_dir/fluxpype/fluxpype/plotting/plot_wind_map_detailed.py"
#       . " --cr $CR --file $out_wind --nwant $n_fluxons_wanted --adapt $adapt"
# ) == 0 or ( die "Python script returned error $?", exit );


# system(
# "python3 $base_dir/fluxpype/fluxpype/plotting/plot_wind_map_square.py"
#       . " --cr $CR --file $out_wind --nwant $n_fluxons_wanted --adapt $adapt --wind_method $flow_method"
# ) == 0 or ( die "Python script returned error $?", exit );


# system(
# "python3 $base_dir/fluxpype/fluxpype/plotting/plot_wind_solutions.py"
#       . " $datdir/batches/$batch_name/data/cr$CR/wind"
# ) == 0 or ( die "Python script returned error $?", exit );


  print color("bright_cyan");
  print("\nDone with wind plotting!\n");
  print("```````````````````````````````\n\n\n");
  print color("reset");

  print color("blue");
  print ("Output directory:\n\n $datdir/batches/$batch_name/ \n\n");
  print color ("reset");
} # End of the if (0) block





# ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ## Count the total time and write to file
my $after         = clock_gettime();
my $elapsed       = $after - $very_beginning;
my $round_elapsed = rint( $elapsed * 10 ) / 10;
# open( my $fhh, ">>", $logfile ) or die "Cannot open file: $!";
# printf $fhh "ttime: $round_elapsed";
# close $fhh;


print color("bright_green");
print
"--------------------------------------------------------------------------------------------------\n";
print
"\tProgram Complete for CR$CR in $round_elapsed Seconds, press RETURN to exit...\n";
print
"--------------------------------------------------------------------------------------------------\n";
print "|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n\n\ ";
print color("reset");

# # system("python3 plot_scalability.py") == 0 or (die "Python script returned error $?", exit);
# # <STDIN>;  # Wait for user input

# 1;
